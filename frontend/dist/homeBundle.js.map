{"version":3,"file":"homeBundle.js","mappings":";;;;;;;;;AAAA,gBAAgB,mBAAO,CAAC,+CAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,6DAA6D,aAAa;AAC1E;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA,wCAAwC,SAAS,GAAG,GAAG;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA,wCAAwC,SAAS,GAAG,GAAG;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,iBAAiB;AAClC;AACA;AACA,wCAAwC,SAAS,GAAG,GAAG;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;AChGA,gBAAgB,mBAAO,CAAC,+CAAW;AACnC;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,wCAAwC,SAAS,gBAAgB,MAAM;AACvE;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC,SAAS,GAAG,GAAG;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB,UAAU;AACV;AACA,qBAAqB;AACrB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU;AACV,UAAU;AACV;AACA,IAAI;AACJ,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,SAAS,gBAAgB,MAAM;AACvE;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC,SAAS,GAAG,GAAG;AACvD;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6BAA6B;;;;;;UC1G7B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA,qBAAqB,mBAAO,CAAC,qEAA2B;AACxD,oBAAoB,mBAAO,CAAC,mEAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA,mCAAmC,YAAY,UAAU,WAAW;AACpE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD,2CAA2C,UAAU;AACrD;AACA,kDAAkD;AAClD,uDAAuD,YAAY;AACnE,+BAA+B,WAAW;AAC1C,qCAAqC,UAAU,QAAQ,UAAU;AACjE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,C","sources":["webpack://frontend/./src/js/services/curseServices.js","webpack://frontend/./src/js/services/service.js","webpack://frontend/./src/js/services/userServices.js","webpack://frontend/webpack/bootstrap","webpack://frontend/./src/js/page_actions/home.js"],"sourcesContent":["const Service = require('./service');\r\n\r\nclass CurseService extends Service{\r\n    constructor(){\r\n        super('curses');\r\n    }\r\n\r\n    async getCursesLimiting(){\r\n        const response = await fetch(`${this.url}/home`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors'\r\n        });\r\n        return response.json();\r\n    }\r\n}\r\n\r\nmodule.exports = CurseService;","class Service {\r\n    #entity;\r\n    url;\r\n\r\n    /**\r\n     * Construtor da classe Service.\r\n     * @param {string} entity - A entidade para a qual o serviço será utilizado.\r\n     */\r\n    constructor(entity) {\r\n        this.#entity = entity;\r\n        this.url = `http://127.0.0.1:3001/skilltech/api/v1/${this.#entity}`;\r\n    }\r\n\r\n    /**\r\n     * Obtém todos os dados da entidade.\r\n     * @returns {Promise<Object>} - Uma promessa que resolve com os dados da entidade.\r\n     */\r\n    async getAllData() {\r\n        const response = await fetch(this.url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors'\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    /**\r\n     * Obtém os dados de uma entidade específica pelo ID.\r\n     * @param {string} id - O ID da entidade.\r\n     * @returns {Promise<Object>} - Uma promessa que resolve com os dados da entidade.\r\n     */\r\n    async getDataById(id) {\r\n        const response = await fetch(`${this.url}/${id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors'\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    /**\r\n     * Envia dados para a entidade.\r\n     * @param {Object} data - Os dados a serem enviados.\r\n     * @returns {Promise<Object>} - Uma promessa que resolve com a resposta do servidor.\r\n     */\r\n    async postData(data) {\r\n        const response = await fetch(this.url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors',\r\n            body: JSON.stringify(data)\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    /**\r\n     * Atualiza os dados de uma entidade específica pelo ID.\r\n     * @param {string} id - O ID da entidade.\r\n     * @param {Object} data - Os dados a serem atualizados.\r\n     * @returns {Promise<Object>} - Uma promessa que resolve com a resposta do servidor.\r\n     */\r\n    async putData(id, data) {\r\n        const response = await fetch(`${this.url}/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors',\r\n            body: JSON.stringify(data)\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    /**\r\n     * Deleta uma entidade específica pelo ID.\r\n     * @param {string} id - O ID da entidade.\r\n     * @returns {Promise<Object>} - Uma promessa que resolve com a resposta do servidor.\r\n     */\r\n    async deleteData(id) {\r\n        const response = await fetch(`${this.url}/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors'\r\n        });\r\n        return response.json();\r\n    }\r\n}\r\n\r\nmodule.exports = Service;","const Service = require('./service');\r\n\r\nclass UserService extends Service {\r\n    constructor() {\r\n        super('users'); // <- isso assume que o endpoint do backend é \"/users\"\r\n    }\r\n\r\n    async getUserByAuth(email) {\r\n        const response = await fetch(`${this.url}/search?email=${email}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors'\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    async getUserCurses(id) {\r\n        const response = await fetch(`${this.url}/${id}/curses`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors'\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    /*async postData(data) {\r\n        try {\r\n            const response = await fetch(`${this.url}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(data),\r\n                mode: 'cors'\r\n            });\r\n\r\n            const responseData = await response.json();\r\n\r\n            if (!response.ok) {\r\n                return { success: false, ...responseData };\r\n            }\r\n\r\n            return { success: true, ...responseData };\r\n        } catch (error) {\r\n            console.error('Erro ao enviar dados:', error);\r\n            return { success: false, message: 'Erro de conexão com o servidor.' };\r\n        }\r\n    }*/\r\n   async postData(data) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3001/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n\r\n    const result = await response.json();\r\n    return response.ok\r\n      ? { success: true, ...result }\r\n      : { success: false, ...result };\r\n\r\n  } catch (error) {\r\n    return { success: false, message: 'Erro de conexão com o servidor.' };\r\n  }\r\n}\r\n\r\n\r\n}\r\n\r\nmodule.exports = UserService;\r\n/*const Service = require('./service');\r\n\r\nclass UserService extends Service{\r\n    constructor(){\r\n        super('users');\r\n    }\r\n\r\n    async getUserByAuth(email){\r\n        const response = await fetch(`${this.url}/search?email=${email}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors'\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    async getUserCurses(id){\r\n        const response = await fetch(`${this.url}/${id}/curses`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            mode: 'cors'\r\n        });\r\n        return response.json();\r\n    }\r\n}\r\n\r\nmodule.exports = UserService;*/","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const CurseService = require('../services/curseServices');\r\nconst Userservice = require('../services/userServices');\r\n\r\nconst curseService = new CurseService();\r\nconst userService = new Userservice();\r\n\r\nconst slideContainer = document.querySelector('.carousel-inner');\r\nconst myCursesContainer = document.querySelector('.active-courses');\r\n\r\nwindow.onload = async () => {\r\n    try{\r\n    const data = await curseService.getCursesLimiting();\r\n    const user = await userService.getUserCurses(getUrlParameter('id'));\r\n    const user_id = sessionStorage.getItem('user_id');\r\n    if( !user_id || user_id == \"null\"){\r\n        sessionStorage.setItem('user_id', getUrlParameter('id'));\r\n    }\r\n    renderNews(slideContainer, data);\r\n    renderMyCurses(myCursesContainer, user[0].curses);\r\n    }catch(error){\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nfunction renderNews(father, newsCurses){\r\n    father.innerHTML = '';\r\n    newsCurses.forEach((curse, i) => {\r\n        const slide = document.createElement('div');\r\n        const caption = document.createElement('div');\r\n        slide.className = 'carousel-item';\r\n        if(i === 0)\r\n            slide.className = 'carousel-item active';\r\n        slide.innerHTML = `<img src=\"${curse.img}\" class=\"d-block w-100\" alt=\"...\">`;\r\n        caption.className = 'carousel-caption d-none d-md-block';\r\n        caption.innerHTML = `<h5>${curse.title}</h5><p>${curse.desc}</p>`;\r\n        slide.appendChild(caption);\r\n        father.appendChild(slide);\r\n    });\r\n}\r\n\r\nfunction renderMyCurses(father, myCurses){\r\n    father.innerHTML = '';\r\n    myCurses.forEach((curse) => {\r\n        const curseCard = document.createElement('div');\r\n        const cardBody = document.createElement('div');\r\n        curseCard.id = curse._id;\r\n        curseCard.className = 'card';\r\n        curseCard.style = 'width: 18rem; margin: 20px;'\r\n        curseCard.innerHTML = `<img src=\"${curse.img}\" class=\"card-img-top\" alt=\"...\">`;\r\n        cardBody.className = 'card-body';\r\n        cardBody.style = 'font-family: lemon_milk;';\r\n        cardBody.innerHTML = `<h5 class=\"card-title\">${curse.title}</h5>\r\n        <p class=\"card-text\">${curse.desc}</p>\r\n        <a href=\"./curse_page.html/${curse._id}\" id=\"${curse._id}\" class=\"btn btn-outline-dark\">Go somewhere</a>`;\r\n        curseCard.appendChild(cardBody);\r\n        father.appendChild(curseCard);\r\n    });\r\n}\r\n\r\nfunction getUrlParameter(name) { \r\n    const urlParams = new URLSearchParams(window.location.search); \r\n    return urlParams.get(name); \r\n} \r\n "],"names":[],"sourceRoot":""}